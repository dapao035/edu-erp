<?phpnamespace app\common\model;use think\Db;use think\model\concern\SoftDelete;class Question extends BaseModel{    use SoftDelete;    protected $table = 'question';    protected $deleteTime = 'delete_time';    const TYPE_SELECT = 1; // 选择    const TYPE_BLANK = 2; // 填空    const TYPE_JUDGEMENT = 3; // 判断    const TYPE_ANSWER = 4; // 简答    function knowledge()    {        return $this->belongsToMany(Knowledge::class, 'knowledge_question', 'knowledge_id', 'question_id');    }    function section()    {        return $this->belongsToMany(Section::class, 'section_question', 'section_id', 'question_id');    }    function opt()    {        return $this->hasMany(QuestionOption::class, 'question_id')->order('sort_num');    }    function qGroup()    {        return $this->belongsTo(QuestionGroup::class, 'group_id');    }    function getTypeNameAttr($value, $data)    {        switch ($data['type']) {            case self::TYPE_SELECT:                $name = '选择题';                break;            case self::TYPE_BLANK:                $name = '填空题';                break;            case self::TYPE_JUDGEMENT:                $name = '判断题';                break;            case self::TYPE_ANSWER:                $name = '简答题';                break;            default:                $name = '未知题型';        }        return $name;    }    function getTitleAttr($value, $data)    {        $title = $data['body'] ? strip_tags($data['body']) : '';        return strlen($title) > 30 ? mb_substr($title, 0, 30) . '...' : $title;    }    static function saveOne(        ?int $question_id,        int $editor_id,        int $question_type,        string $question_body,        array $options,        string $right_answer,        ?array $rel_knowledge,        ?array $rel_section,        int $category_id,        string $explain,        $group_id = null)    {        if ($group_id == null)            $group_id = QuestionGroup::addOne($editor_id);        $data['group_id'] = $group_id;        $data['body'] = $question_body;        $data['editor_id'] = $editor_id;        $data['category_id'] = $category_id;        $data['type'] = $question_type;        $data['answer'] = self::wrapAnswer($right_answer, $question_type);        $data['explain'] = $explain;        $data['edit_time'] = now();        if (!$question_body == 1) {            \exception("缺少内容");        }        if ($question_type == 1 && count($options) == 0) {            \exception("缺少选项");        }        if ($question_type != static::TYPE_ANSWER && !$right_answer) {            \exception("缺少答案");        }        if ($question_id) {            // 更新            static::where('id', $question_id)->update($data);        } else {            // 新增            $data['sort_num'] = static::where(compact('group_id'))->count();            $data['add_time'] = now();            $question_id = static::insertGetId($data);        }        if (!empty($rel_knowledge) && count($rel_knowledge) > 0) {            static::updateKnowledgeRel($question_id, $rel_knowledge);        }        if (!empty($rel_section) && count($rel_section) > 0) {            static::updateSectionRel($question_id, $rel_section);        }        if ($question_type == static::TYPE_SELECT) {            QuestionOption::addSome($question_id, $options);        }    }    // 更新知识点关联    static function doSort(array $ids)    {        $count = 0;        foreach ($ids as $k => $id) {            $count += self::where('id', $id)->update(['sort_num' => $k]);        }        return $count > 0;    }    // 更新知识点关联    static function updateKnowledgeRel(int $question_id, array $knowledge_ids)    {        if (count($knowledge_ids) == 0)            exception('知识点不能为空');        Db::name('knowledge_question')->where(compact('question_id'))->delete();        $insert = [];        foreach ($knowledge_ids as $id) {            $insert[] = [                'knowledge_id' => $id,                'question_id' => $question_id,            ];        }        Db::name('knowledge_question')->insertAll($insert);    }    // 更新章节关联    static function updateSectionRel(int $question_id, array $section_ids)    {        if (count($section_ids) == 0)            exception('章节不能为空');        Db::name('section_question')->where(compact('question_id'))->delete();        $insert = [];        foreach ($section_ids as $id) {            $insert[] = [                'section_id' => $id,                'question_id' => $question_id,            ];        }        Db::name('section_question')->insertAll($insert);    }    // 上移    static function up($id)    {        $find = self::find($id);        $t = self::where('sort_num', '<', $find['sort_num'])->order('sort_num desc')->find();        if (!$t) return false;        self::where('id', $find['id'])->update(['sort_num' => $t['sort_num']]);        return self::where('id', $t['id'])->update(['sort_num' => $find['sort_num']]);    }    // 下移    static function down($id)    {        $find = self::find($id);        $t = self::where('sort_num', '>', $find['sort_num'])->order('sort_num')->find();        if (!$t) return false;        self::where('id', $find['id'])->update(['sort_num' => $t['sort_num']]);        return self::where('id', $t['id'])->update(['sort_num' => $find['sort_num']]);    }    // 按组查询结果    static function selectWithGroup($where = [], $order = '')    {        $list = Question::with('qGroup')            ->field("*, count(id) g_count")            ->where($where)            ->order($order)            ->group('group_id')            ->append(['type_name'])            ->paginate(config('paginate.per_page'))            ->each(function ($item) {                if ($item['q_group']['body']) {                    $body = strip_tags($item['q_group']['body']);                } else {                    $body = strip_tags($item['body']);                }                $body = strlen($body) > 50 ? mb_substr($body, 0, 50) . '...' : $body;                $item['body'] = $body;            });        return $list;    }    private static function makeAnswerStr($answer)    {        $value = str_split(str_replace(['，', ' ' . ','], '', $answer));        sort($value);        return trim(strtoupper(implode($value)));    }    static function wrapAnswer($value, $type)    {        switch ($type) {            case self::TYPE_SELECT:                $answer = self::makeAnswerStr($value);                break;            case self::TYPE_BLANK:                $answer = trim($value);                break;            case self::TYPE_JUDGEMENT:                if ($value == '对' || $value == "正确" || $value = "1") {                    $answer = '对';                } else                    $answer = '错';                break;            case self::TYPE_ANSWER:                $answer = trim($value);                break;            default:                exception("未知题型");        }        return $answer;    }    // 判断对错    static function isRight(self $question, $value)    {        $res = false;        switch ($question['type']) {            case self::TYPE_SELECT:                $res = self::makeAnswerStr($value) == $question['answer'];                break;            case self::TYPE_BLANK:                $res = $value == $question['answer'];                break;            case self::TYPE_JUDGEMENT:                $res = ($value == 1 || $value == '对' || $value == '正确' ? '对' : '错') == $question['answer'];                break;            case self::TYPE_ANSWER:                $res = $value == $question['answer'];                break;        }        return $res;    }    // 用对错判断得分    static function getScoreByJudge(int $test_id, self $question, bool $is_right)    {        if ($is_right) {            $find = TestQuestion::where('test_id', $test_id)->where('question_id', $question['id'])->find();            if(!$find) exception("未知试题");            return $find['score'];        }        else return 0;    }    // 用答案判断得分    static function getScoreByAnswer(int $test_id, self $question, $value)    {        if (self::isRight($question, $value)) {            $find = TestQuestion::where('test_id', $test_id)->where('question_id', $question['id'])->find();            if(!$find) exception("未知试题");            return $find['score'];        }        else return 0;    }}